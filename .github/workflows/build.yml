name: "build"
on:
  pull_request:
    branches:
      - main
  merge_group:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # 0000 UTC Sunday

env:
  FQ_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-base:
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to GHCR
        if: contains(fromJson('["workflow_dispatch", "merge_group", "schedule"]'), github.event_name)
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Image name
        id: name
        run: |
          echo "FQ_NAME=${FQ_NAME,,}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          driver: docker-container

      - name: Build Dev Container
        id: build-base
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6 # v0.3
        with:
          subFolder: ./src/base
          imageName: ${{ steps.name.outputs.FQ_NAME }}
          imageTag: base-${{ github.sha }}-${{ matrix.arch }}
          platform: linux/${{ matrix.arch }}
          refFilterForPush: |
            refs/heads/main
          eventFilterForPush: |
            merge_group
            workflow_dispatch
            schedule
     
      - name: Find and Load Base Image into Docker
        if: github.event_name == 'pull_request'
        run: |
          echo "Searching for the output tarball in /tmp..."
          # Find the first .tar file in /tmp and ignore permission errors
          TAR_PATH=$(find /tmp -name "*.tar" 2>/dev/null -print -quit)
          
          if [[ -z "$TAR_PATH" ]]; then
            echo "::error::Could not find the output tarball from the build step."
            exit 1
          fi
          
          echo "Found image artifact at: $TAR_PATH"
          echo "File details:"
          ls -lh $TAR_PATH
          
          echo "Loading image into Docker daemon..."
          docker load < $TAR_PATH
          echo "Image loaded successfully."

      - name: Change base image in titanoboa devcontainer.json
        run: |
          echo "Verifying image is available to Docker:"
          docker images     
          grep -v '^\s*//' ./src/titanoboa/.devcontainer/devcontainer.json | \
          jq --arg img "${{ steps.name.outputs.FQ_NAME }}:base-${{ github.sha }}-${{ matrix.arch }}" '.image = $img' > tmp.json \
          && mv tmp.json ./src/titanoboa/.devcontainer/devcontainer.json
    
      - name: Build Titanoboa Dev Container
        id: build-titanoboa
        uses: devcontainers/ci@8bf61b26e9c3a98f69cb6ce2f88d24ff59b785c6 # v0.3
        with:
          subFolder: ./src/titanoboa
          imageName: ${{ steps.name.outputs.FQ_NAME }}
          imageTag: titanoboa-${{ github.sha }}-${{ matrix.arch }}
          platform: linux/${{ matrix.arch }}
          refFilterForPush: |
            refs/heads/main
          eventFilterForPush: |
            merge_group
            workflow_dispatch
            schedule


  sign:
    if: contains(fromJson('["workflow_dispatch", "merge_group", "schedule"]'), github.event_name)
    needs: ["build-base"]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      - name: Lowercase Image Repo
        id: name
        run: |
          echo "FQ_NAME=${FQ_NAME,,}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Sign Dev Containers
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${{ steps.name.outputs.FQ_NAME }}:base-${{ github.sha }}-${{ matrix.arch }}
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${{ steps.name.outputs.FQ_NAME }}:titanoboa-${{ github.sha }}-${{ matrix.arch }} || true
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

  manifest:
    if: github.event_name != 'pull_request'
    needs: ["sign"]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase Image Repo
        id: name
        run: echo "FQ_NAME=${FQ_NAME,,}" >> "$GITHUB_OUTPUT"

      - name: Push Manifests
        run: |
          set -ex
          docker manifest create ${{ steps.name.outputs.FQ_NAME }}:latest \
            --amend ${{ steps.name.outputs.FQ_NAME }}:base-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.FQ_NAME }}:base-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.FQ_NAME }}:latest

          docker manifest create ${{ steps.name.outputs.FQ_NAME }}:${{ github.sha }} \
            --amend ${{ steps.name.outputs.FQ_NAME }}:base-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.FQ_NAME }}:base-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.FQ_NAME }}:${{ github.sha }}

          docker manifest create ${{ steps.name.outputs.FQ_NAME }}:titanoboa \
            --amend ${{ steps.name.outputs.FQ_NAME }}:t itanoboa-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.FQ_NAME }}:titanoboa-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.FQ_NAME }}:titanoboa

          docker manifest create ${{ steps.name.outputs.FQ_NAME }}:titanoboa-${{ github.sha }} \
            --amend ${{ steps.name.outputs.FQ_NAME }}:titanoboa-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.FQ_NAME }}:titanoboa-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.FQ_NAME }}:titanoboa-${{ github.sha }}
