name: "Build and Push Containers"

on:
  pull_request:
    branches:
      - main
  merge_group:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # 0000 UTC on Sunday

# Use a single env var for the base repository name.
# It will be lowercased in a later step for OCI compliance.
env:
  IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build:
    strategy:
      fail-fast: false # Don't cancel all jobs if one architecture fails
      matrix:
        arch: [amd64, arm64]
    # Use standard GitHub-hosted runners for each architecture
    runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-24.04' || 'ubuntu-latest-4-cores-arm64' }}
    permissions:
      contents: read
      packages: write # Required to push to GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login is only needed when we are going to push images
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Lowercase Image Repo
        id: name
        run: echo "IMAGE_REPO=${IMAGE_REPO,,}" >> "$GITHUB_OUTPUT"

      - name: Build Base Container
        uses: devcontainers/ci@v0.3
        with:
          platform: linux/${{ matrix.arch }}
          subfolder: ./src/base
          imageName: ${{ steps.name.outputs.IMAGE_REPO }}
          # Create a unique, predictable tag for this specific architecture build
          imageTag: base-${{ github.sha }}-${{ matrix.arch }}
          # Only push on merge/dispatch/schedule events, not on pull requests
          push: ${{ github.event_name != 'pull_request' && 'always' || 'never' }}

      - name: Build Titanoboa Container
        uses: devcontainers/ci@v0.3
        with:
          platform: linux/${{ matrix.arch }}
          # Speed up the build by caching from the 'base' image we just built for this arch
          cacheFrom: ${{ steps.name.outputs.IMAGE_REPO }}:base-${{ github.sha }}-${{ matrix.arch }}
          subfolder: ./src/titanoboa
          imageName: ${{ steps.name.outputs.IMAGE_REPO }}
          # Create a unique, predictable tag for this specific architecture build
          imageTag: titanoboa-${{ github.sha }}-${{ matrix.arch }}
          # Only push on merge/dispatch/schedule events, not on pull requests
          push: ${{ github.event_name != 'pull_request' && 'always' || 'never' }}

  sign:
    # Run this job only for push events
    if: github.event_name != 'pull_request'
    needs: ["build"]
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write # Required to push signatures
      id-token: write # Required for keyless signing with Sigstore
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Lowercase Image Repo
        id: name
        run: echo "IMAGE_REPO=${IMAGE_REPO,,}" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Sign Architecture-Specific Images
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${{ steps.name.outputs.IMAGE_REPO }}:base-${{ github.sha }}-${{ matrix.arch }}
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }}-${{ matrix.arch }}
        env:
          # Assumes you have a COSIGN_PRIVATE_KEY secret in your repository
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

  manifest:
    # Run this job only for push events
    if: github.event_name != 'pull_request'
    # This job runs once after all arch-specific images are built and signed
    needs: ["sign"]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write # Required to push the final manifest
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase Image Repo
        id: name
        run: echo "IMAGE_REPO=${IMAGE_REPO,,}" >> "$GITHUB_OUTPUT"

      - name: Create and Push Multi-Arch Manifests
        run: |
          set -ex
          docker manifest create ${{ steps.name.outputs.IMAGE_REPO }}:latest \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:base-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:base-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.IMAGE_REPO }}:latest

          docker manifest create ${{ steps.name.outputs.IMAGE_REPO }}:${{ github.sha }} \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:base-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:base-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.IMAGE_REPO }}:${{ github.sha }}

          docker manifest create ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa

          docker manifest create ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }} \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }}-amd64 \
            --amend ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }}-arm64
          docker manifest push ${{ steps.name.outputs.IMAGE_REPO }}:titanoboa-${{ github.sha }}